# frozen_string_literal: true


require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "EventsControllers", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # EventsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    let!(:contract) { create(:contract, name: 'guest', week_start_time: 19, week_end_time: 24, weekend_start_time: 10, weekend_end_time: 24) }
    let(:params) { attributes_for(:event, name: 'free', date: '2022-01-19', personal: 'Ernesto', contract_id: contract.id, start_time: '19:00', end_time: '24:00') }

    it "renders a successful response" do
      Event.create! params
      get api_v1_events_path, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    let!(:contract) { create(:contract, name: 'guest', week_start_time: 19, week_end_time: 24, weekend_start_time: 10, weekend_end_time: 24) }
    let(:params) { attributes_for(:event, name: 'free', date: '2022-01-19', personal: 'Ernesto', contract_id: contract.id, start_time: '19:00', end_time: '24:00') }

    it "renders a successful response" do
      event = Event.create!  params: { event: params }
      get api_v1_event_path(event), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      let!(:contract) { create(:contract, name: 'guest', week_start_time: 19, week_end_time: 24, weekend_start_time: 10, weekend_end_time: 24) }
      let(:params) { Event.create(name: 'free', date: '2022-01-19', personal: 'Ernesto', contract_id: contract.id, start_time: '19:00', end_time: '24:00') }
      it "creates a new Event" do
        expect {
          post '/api/v1/event',
               params: { event: params },
               headers: valid_headers, as: :json
        }.to change(Event, :count).by(1)
      end

      it "renders a JSON response with the new event" do
        post events_url,
             params: { event: params }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Event" do
        expect {
          post "/api/v1/events",
               params: { event: invalid_attributes }, as: :json
        }.to change(Event, :count).by(0)
      end

      it "renders a JSON response with errors for the new event" do
        post "/api/v1/events",
             params: { event: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let!(:contract) { create(:contract, name: 'guest', week_start_time: 19, week_end_time: 24, weekend_start_time: 10, weekend_end_time: 24) }
      let(:params) { attributes_for(:event, name: 'free', personal: 'Ernesto', contract_id: contract.id, start_time: '19:00', end_time: '24:00') }

      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested event" do
        event = Event.create! params
        patch event_url(event),
              params: { event: new_attributes }, headers: valid_headers, as: :json
        event.reload
        skip("Add assertions for updated state")
      end

      it "renders a JSON response with the event" do
        event = Event.create! params
        patch event_url(event),
              params: { event: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the event" do
        event = Event.create! params
        patch event_url(event),
              params: { event: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested event" do
      event = Event.create! params
      expect {
        delete event_url(event), headers: valid_headers, as: :json
      }.to change(Event, :count).by(-1)
    end
  end
end
